/**
 * @fileoverview added by tsickle
 * Generated from: components/Messages/cometchat-action-message-bubble/cometchat-action-message-bubble/cometchat-action-message-bubble.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from "@angular/core";
import { CometChat } from "@cometchat-pro/chat";
import { STRING_MESSAGES } from "../../../utils/messageConstants";
var CometchatActionMessageBubbleComponent = /** @class */ (function () {
    function CometchatActionMessageBubbleComponent() {
        this.MessageDetails = null;
    }
    /**
     * @return {?}
     */
    CometchatActionMessageBubbleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getMessage();
    };
    /**
     * @return {?}
     */
    CometchatActionMessageBubbleComponent.prototype.getMessage = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var call = this.MessageDetails;
        switch (call.status) {
            case CometChat.CALL_STATUS.INITIATED: {
                this.message = STRING_MESSAGES.CALL_INITIATED;
                if (call.type === "audio") {
                    if (call.receiverType === "user") {
                        this.message =
                            call.callInitiator.uid === this.loggedInUserUid
                                ? STRING_MESSAGES.OUTGOING_AUDIO_CALL
                                : STRING_MESSAGES.INCOMING_AUDIO_CALL;
                    }
                    else if (call.receiverType === "group") {
                        if (call.action === CometChat.CALL_STATUS.INITIATED) {
                            this.message =
                                call.callInitiator.uid === this.loggedInUserUid
                                    ? STRING_MESSAGES.OUTGOING_AUDIO_CALL
                                    : STRING_MESSAGES.INCOMING_AUDIO_CALL;
                        }
                        else if (call.action === CometChat.CALL_STATUS.REJECTED) {
                            this.message =
                                call.sender.uid === this.loggedInUserUid
                                    ? STRING_MESSAGES.CALL_REJECTED
                                    : call.sender.name + " " + STRING_MESSAGES.REJECTED_CALL;
                        }
                    }
                }
                else if (call.type === "video") {
                    if (call.receiverType === "user") {
                        this.message =
                            call.callInitiator.uid === this.loggedInUserUid
                                ? STRING_MESSAGES.OUTGOING_VIDEO_CALL
                                : STRING_MESSAGES.INCOMING_VIDEO_CALL;
                    }
                    else if (call.receiverType === "group") {
                        if (call.action === CometChat.CALL_STATUS.INITIATED) {
                            this.message =
                                call.callInitiator.uid === this.loggedInUserUid
                                    ? STRING_MESSAGES.OUTGOING_VIDEO_CALL
                                    : STRING_MESSAGES.INCOMING_VIDEO_CALL;
                        }
                        else if (call.action === CometChat.CALL_STATUS.REJECTED) {
                            this.message =
                                call.sender.uid === this.loggedInUserUid
                                    ? STRING_MESSAGES.CALL_REJECTED
                                    : call.sender.name + " " + STRING_MESSAGES.REJECTED_CALL;
                        }
                    }
                }
                break;
            }
            case CometChat.CALL_STATUS.ONGOING: {
                if (call.receiverType === "user") {
                    this.message = STRING_MESSAGES.CALL_ACCEPTED;
                }
                else if (call.receiverType === "group") {
                    if (call.action === CometChat.CALL_STATUS.ONGOING) {
                        this.message =
                            call.sender.uid === this.loggedInUserUid
                                ? STRING_MESSAGES.CALL_ACCEPTED
                                : call.sender.name + " " + STRING_MESSAGES.JOINED;
                    }
                    else if (call.action === CometChat.CALL_STATUS.REJECTED) {
                        this.message =
                            call.sender.uid === this.loggedInUserUid
                                ? STRING_MESSAGES.CALL_REJECTED
                                : call.sender.name + " " + STRING_MESSAGES.REJECTED_CALL;
                    }
                    else if (call.action === "left") {
                        this.message =
                            call.sender.uid === this.loggedInUserUid
                                ? "You " + STRING_MESSAGES.LEFT_THE_CALL
                                : call.sender.name + " " + STRING_MESSAGES.LEFT_THE_CALL;
                    }
                }
                break;
            }
            case CometChat.CALL_STATUS.UNANSWERED: {
                this.message = "Call unanswered";
                if (call.type === "audio" &&
                    (call.receiverType === "user" || call.receiverType === "group")) {
                    this.message =
                        call.callInitiator.uid === this.loggedInUserUid
                            ? STRING_MESSAGES.UNANSWERED_AUDIO_CALL
                            : "Missed audio call";
                }
                else if (call.type === "video" &&
                    (call.receiverType === "user" || call.receiverType === "group")) {
                    this.message =
                        call.callInitiator.uid === this.loggedInUserUid
                            ? STRING_MESSAGES.UNANSWERED_VIDEO_CALL
                            : "Missed video call";
                }
                break;
            }
            case CometChat.CALL_STATUS.REJECTED: {
                this.message = STRING_MESSAGES.CALL_REJECTED;
                break;
            }
            case CometChat.CALL_STATUS.ENDED:
                this.message = STRING_MESSAGES.CALL_ENDED;
                break;
            case CometChat.CALL_STATUS.CANCELLED:
                this.message = STRING_MESSAGES.CALL_CANCELLED;
                break;
            case CometChat.CALL_STATUS.BUSY:
                this.message = STRING_MESSAGES.CALL_BUSY;
                break;
            default:
                break;
        }
    };
    CometchatActionMessageBubbleComponent.decorators = [
        { type: Component, args: [{
                    selector: "cometchat-action-message-bubble",
                    template: "<div class=\"callMessageStyle\">\n  <p class=\"callMessageTxtStyle\">\n    {{ message }}\n  </p>\n</div>\n",
                    styles: [".callMessageStyle{padding:8px 12px;margin-bottom:16px;text-align:center}.callMessageTxtStyle{font-size:13px;font-weight:500;margin:0}"]
                }] }
    ];
    /** @nocollapse */
    CometchatActionMessageBubbleComponent.ctorParameters = function () { return []; };
    CometchatActionMessageBubbleComponent.propDecorators = {
        MessageDetails: [{ type: Input }],
        loggedInUserUid: [{ type: Input }]
    };
    return CometchatActionMessageBubbleComponent;
}());
export { CometchatActionMessageBubbleComponent };
if (false) {
    /** @type {?} */
    CometchatActionMessageBubbleComponent.prototype.MessageDetails;
    /** @type {?} */
    CometchatActionMessageBubbleComponent.prototype.loggedInUserUid;
    /** @type {?} */
    CometchatActionMessageBubbleComponent.prototype.message;
}
//# sourceMappingURL=data:application/json;base64,